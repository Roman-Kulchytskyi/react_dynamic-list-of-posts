{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","postsFromServer","onSelectedPost","selectedPost","className","map","post","id","title","type","cn","onClick","handleSelectedPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","currentPost","onAddComment","handleFormVisibility","useState","name","email","formInfo","setFormInfo","formErrors","setFormErrors","responseError","setResponseError","isLoading","setIsLoading","handleFormChange","field","value","prevFormInfo","prevErrors","clearFormInfo","form","clearedForm","onSubmit","event","preventDefault","Object","entries","forEach","trim","postId","catch","finally","htmlFor","placeholder","onChange","target","PostDetails","comments","setComments","loadingComments","setLoadingComments","loadingError","setLoadingError","deletingError","setDeletingError","isFormVisible","setIsFormVisible","useEffect","handleDeleteComment","commentId","filter","comment","length","href","UserSelector","usersFromServer","onDropdown","onUserClick","isVisibleUsers","selectedUser","role","user","App","users","setUsers","posts","setPosts","setIsVisibleUsers","setSelectedPost","setSelectedUser","userId","classNames","setCommentError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f660a18a.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  postsFromServer: Post[],\n  onSelectedPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsFromServer,\n  onSelectedPost,\n  selectedPost,\n}) => {\n\n  const handleSelectedPost = (post: Post) => {\n\n    if (selectedPost?.id !== post.id) {\n      onSelectedPost(post);\n    } else {\n      onSelectedPost(null);\n    }\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {postsFromServer.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handleSelectedPost(post)}\n                >\n                  {selectedPost ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { addComment } from '../api/comments';\nimport { FormInfo } from '../types/FormInfo';\nimport { FormErrors } from '../types/FormErrors';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  currentPost: Post,\n  handleFormVisibility: () => void,\n  onAddComment: (comment: Comment) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  currentPost,\n  onAddComment,\n  handleFormVisibility,\n}) => {\n  const [formInfo, setFormInfo] = useState<FormInfo>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formErrors, setFormErrors] = useState<FormErrors>({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [responseError, setResponseError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleFormChange = (field: string, value: string) => {\n    setFormInfo((prevFormInfo) => ({ ...prevFormInfo, [field]: value }));\n    setFormErrors((prevErrors) => ({ ...prevErrors, [field]: false }));\n  }\n\n  const clearFormInfo = (form: FormInfo) => {\n    const clearedForm: Record<string, string> = {};\n\n    for (const field in form) {\n      clearedForm[field] = '';\n    }\n\n    handleFormVisibility();\n  };\n\n  const handleFormSubmit: React.FormEventHandler = (event) => {\n    event.preventDefault();\n\n    Object.entries(formInfo).forEach(([field, value]) => {\n      if (value.trim() === '') {\n        setFormErrors((prevErrors) => ({ ...prevErrors, [field]: true }));\n      } else {\n        setFormErrors((prevErrors) => ({ ...prevErrors, [field]: false }));\n      }\n    });\n\n    if (formInfo.name && formInfo.email && formInfo.body) {\n      setIsLoading(true);\n\n      addComment({\n        postId: currentPost.id,\n        name: formInfo.name,\n        email: formInfo.name,\n        body: formInfo.body,\n      })\n      .then((response) => {\n        onAddComment(response);\n      })\n      .catch(() => {\n        setResponseError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n        clearFormInfo(formInfo);\n      })\n    }\n  }\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': formErrors.name,\n            })}\n            value={formInfo.name}\n            onChange={(event) => {\n              handleFormChange('name', event.target.value)\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': formErrors.email,\n            })}\n            value={formInfo.email}\n            onChange={(event) => {\n              handleFormChange('email', event.target.value)\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': formErrors.body,\n            })}\n            value={formInfo.body}\n            onChange={(event) => {\n              handleFormChange('body', event.target.value)\n            }}\n          />\n        </div>\n\n        {formErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              clearFormInfo(formInfo)\n            }}\n          >\n            Clear\n          </button>\n        </div>\n\n        {responseError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Unable to add comment, try again.\n          </p>\n        )}\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport const addComment = (data: {\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n}) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, {useEffect, useState} from 'react';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport * as CommentService from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  currentPost: Post,\n  setCommentError: (arg: boolean) => void,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  currentPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loadingComments, setLoadingComments] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n  const [deletingError, setDeletingError] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState<boolean>(false);\n\n  const handleFormVisibility = () => {\n    setIsFormVisible(false);\n  };\n\n  useEffect(() => {\n    setLoadingComments(true)\n\n    CommentService.getComments(currentPost.id)\n      .then(setComments)\n      .catch(() => {\n        setLoadingError(true)\n      })\n      .finally(() => {\n        setLoadingComments(false);\n      })\n  }, [currentPost]);\n\n  const handleAddComment = (response: Comment) => {\n    setComments([...comments, response]);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setDeletingError(false);\n\n    CommentService.deleteComment(commentId)\n      .then(() => {\n        setComments(comments => comments.filter(comment => comment.id !== commentId));\n      })\n      .catch(() => {\n        setDeletingError(true);\n      });\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost.id}: ${currentPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loadingComments && <Loader />}\n\n          {loadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                      >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {deletingError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Unable to add comment, try again.\n            </p>\n          )}\n\n          {!isFormVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm\n            currentPost={currentPost}\n            handleFormVisibility={handleFormVisibility}\n            onAddComment={handleAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  usersFromServer: User[],\n  onUserClick: (user: User) => void,\n  onDropdown: () => void,\n  isVisibleUsers: boolean,\n  selectedUser: User | null,\n}\n\n\nexport const UserSelector: React.FC<Props> = ({\n  usersFromServer,\n  onDropdown,\n  onUserClick,\n  isVisibleUsers,\n  selectedUser,\n}) => {\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={onDropdown}\n        >\n          {selectedUser === null\n            ? <span>Choose a user</span>\n            : <span>{selectedUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisibleUsers && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {usersFromServer.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n                key={user.id}\n                onClick={() => onUserClick(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useState,\n  useEffect,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isVisibleUsers, setIsVisibleUsers] = useState<boolean>(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n  }, []);\n\n  const handleDropdown = () => {\n    setIsVisibleUsers(!isVisibleUsers)\n  };\n\n  const handleUserClick = (user: User) => {\n    setIsVisibleUsers(false);\n    setIsLoading(true)\n    setSelectedUser(user)\n\n    getPosts(user.id)\n      .then(setPosts)\n      .catch(() => {\n        setLoadingError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      })\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersFromServer={users}\n                  onUserClick={handleUserClick}\n                  onDropdown={handleDropdown}\n                  isVisibleUsers={isVisibleUsers}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading &&  <Loader />}\n\n                {loadingError && (\n                  <div\n                  className=\"notification is-danger\"\n                  data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!posts.length && selectedUser && !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && selectedUser && !loadingError && (\n                  <PostsList\n                    postsFromServer={posts}\n                    onSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  currentPost={selectedPost}\n                  setCommentError={setLoadingError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from \"../utils/fetchClient\";\nimport { User } from \"../types/User\";\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}